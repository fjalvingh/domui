package to.etc.syntaxer;

import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
import to.etc.util.LineIterator;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @author <a href="mailto:jal@etc.to">Frits Jalvingh</a>
 * Created on 05-05-22.
 */
public class SqlHighlighter extends HiParser implements IHighlighter {
	public SqlHighlighter() {
		//-- Configure the parser for Java
		setKeywordCaseIndependent();
		initKeywords();
	}

	private void initKeywords() {
		//-- types
		addKeywords(HighlightTokenType.type,
			"bigint",
			"bigserial",
			"bit",
			"bool",
			"boolean",
			"bytea",
			"character",
			"char",
			"dec",
			"decimal",
			"date",
			"double",
			"float",
			"float4",
			"float8",
			"int",
			"integer",
			"int2",
			"int4",
			"int8",
			"interval",
			"json",
			"jsonb",
			"nchar",
			"numeric",
			"oid",
			"precision",
			"real",
			"serial",
			"serial8",
			"smallint",
			"smallserial",
			"text",
			"time",
			"timestamp",
			"timestamptz",
			"timetz",
			"varbit",
			"varchar",
			"varying",
			"zone"
		);


		//-- Functions
		addKeywords(HighlightTokenType.keyword2,
			"abbrev",
			"abs",
			"acos",
			"acosd",
			"age",
			"area",
			"array_agg",
			"array_append",
			"array_cat",
			"array_dims",
			"array_fill",
			"array_length",
			"array_lower",
			"array_ndims",
			"array_position",
			"array_positions",
			"array_prepend",
			"array_remove",
			"array_replace",
			"array_to_json",
			"array_to_string",
			"array_to_tsvector",
			"array_upper",
			"ascii",
			"asin",
			"asind",
			"atan",
			"atan2",
			"atan2d",
			"atand",
			"avg",
			"bit_and",
			"bit_length",
			"bit_or",
			"bool_and",
			"bool_or",
			"bound_box",
			"box",
			"brin_desummarize_range",
			"brin_summarize_new_values",
			"brin_summarize_range",
			"broadcast",
			"btrim",
			"cardinality",
			"cast",
			"cbrt",
			"ceil",
			"ceiling",
			"center",
			"character_length",
			"char_length",
			"chr",
			"circle",
			"clock_timestamp|10",
			"coalesce",
			"col_description",
			"concat",
			"concat_ws",
			"convert",
			"convert_from",
			"convert_to",
			"corr",
			"cos",
			"cosd",
			"cot",
			"cotd",
			"count",
			"covar_pop",
			"covar_samp",
			"cume_dist",
			"current_database",
			"current_query",
			"current_schemas|10",
			"current_schema|10",
			"current_setting",
			"currval",
			"cursor_to_xml",
			"cursor_to_xmlschema",
			"database_to_xml",
			"database_to_xmlschema",
			"database_to_xml_and_xmlschema",
			"date_part",
			"date_trunc",
			"decode",
			"degrees",
			"dense_rank",
			"diameter",
			"div",
			"encode",
			"enum_first",
			"enum_last",
			"enum_range",
			"every",
			"exp",
			"first_value",
			"floor",
			"format_type",
			"generate_series",
			"generate_subscripts",
			"get_bit",
			"get_byte",
			"get_current_ts_config",
			"gin_clean_pending_list",
			"greatest",
			"grouping",
			"height",
			"host",
			"hostmask",
			"inet_client_addr",
			"inet_client_port",
			"inet_merge",
			"inet_same_family",
			"inet_server_addr",
			"inet_server_port",
			"initcap",
			"isclosed",
			"isempty",
			"isfinite",
			"isopen",
			"jsonb_agg",
			"jsonb_array_elements",
			"jsonb_array_elements_text",
			"jsonb_array_length",
			"jsonb_build_array",
			"jsonb_build_object",
			"jsonb_each",
			"jsonb_each_text",
			"jsonb_extract_path",
			"jsonb_insert",
			"jsonb_object",
			"jsonb_object_agg",
			"jsonb_object_keys",
			"jsonb_populate_record",
			"jsonb_populate_recordset",
			"jsonb_pretty",
			"jsonb_set",
			"jsonb_strip_nulls",
			"jsonb_to_record",
			"jsonb_to_recordset",
			"jsonb_to_tsvector",
			"jsonb_typeof",
			"json_agg",
			"json_array_elements",
			"json_array_elements_text",
			"json_array_length",
			"json_build_array",
			"json_build_object",
			"json_each",
			"json_each_text",
			"json_extract_path",
			"json_object",
			"json_object_agg",
			"json_object_keys",
			"json_populate_record",
			"json_populate_recordset",
			"json_strip_nulls",
			"json_to_record",
			"json_to_recordset",
			"json_to_tsvector",
			"json_typeof",
			"justify_days",
			"justify_hours",
			"justify_interval",
			"lag",
			"lastval",
			"last_value",
			"lead",
			"least",
			"length",
			"line",
			"ln",
			"log",
			"loread",
			"lower",
			"lower_inc",
			"lower_inf",
			"lowrite",
			"lo_creat",
			"lo_create",
			"lo_export",
			"lo_from_bytea",
			"lo_get",
			"lo_import",
			"lo_put",
			"lo_unlink",
			"lpad",
			"lseg",
			"ltrim",
			"macaddr8_set7bit",
			"make_date",
			"make_interval|10",
			"make_time",
			"make_timestamptz|10",
			"make_timestamp|10",
			"masklen",
			"max",
			"md5",
			"min",
			"mod",
			"mode",
			"netmask",
			"network",
			"nextval",
			"now",
			"npoints",
			"nth_value",
			"ntile",
			"nullif",
			"numnode",
			"num_nonnulls",
			"num_nulls",
			"obj_description",
			"octet_length",
			"octet_length",
			"overlay",
			"parse_ident",
			"path",
			"pclose",
			"percentile_cont",
			"percentile_disc",
			"percent_rank",
			"pg_client_encoding",
			"phraseto_tsquery",
			"pi",
			"plainto_tsquery",
			"polygon",
			"popen",
			"position",
			"power",
			"querytree",
			"query_to_xml",
			"query_to_xmlschema",
			"query_to_xml_and_xmlschema",
			"quote_ident|10",
			"quote_literal|10",
			"quote_nullable|10",
			"radians",
			"radius",
			"random",
			"range_merge",
			"rank",
			"regexp_match",
			"regexp_matches",
			"regexp_replace",
			"regexp_split_to_array",
			"regexp_split_to_table",
			"regr_avgx",
			"regr_avgy",
			"regr_count",
			"regr_intercept",
			"regr_r2",
			"regr_slope",
			"regr_sxx",
			"regr_sxy",
			"regr_syy",
			"repeat",
			"replace",
			"reverse",
			"round",
			"row_number",
			"row_security_active",
			"row_to_json",
			"rpad",
			"rtrim",
			"scale",
			"schema_to_xml",
			"schema_to_xmlschema",
			"schema_to_xml_and_xmlschema",
			"setseed",
			"setval",
			"setweight",
			"set_bit",
			"set_byte",
			"set_config",
			"set_masklen",
			"shobj_description",
			"sign",
			"sin",
			"sind",
			"split_part",
			"sqrt",
			"statement_timestamp|10",
			"stddev",
			"stddev_pop",
			"stddev_samp",
			"string_agg",
			"string_to_array",
			"strip",
			"strpos",
			"substr",
			"substring",
			"sum",
			"suppress_redundant_updates_trigger",
			"table_to_xml",
			"table_to_xmlschema",
			"table_to_xml_and_xmlschema",
			"tan",
			"tand",
			"text",
			"timeofday",
			"to_ascii",
			"to_char",
			"to_date",
			"to_hex",
			"to_json",
			"to_jsonb",
			"to_number",
			"to_regclass",
			"to_regnamespace",
			"to_regoper",
			"to_regoperator",
			"to_regproc",
			"to_regprocedure",
			"to_regrole",
			"to_regtype",
			"to_timestamp",
			"to_tsquery",
			"to_tsvector",
			"transaction_timestamp|10",
			"translate",
			"treat",
			"trim",
			"trunc",
			"tsquery_phrase",
			"tsvector_to_array",
			"tsvector_update_trigger",
			"tsvector_update_trigger_column",
			"ts_delete",
			"ts_filter",
			"ts_headline",
			"ts_rank",
			"ts_rank_cd",
			"ts_rewrite",
			"txid_current",
			"txid_current_if_assigned",
			"txid_current_snapshot",
			"txid_snapshot_xip",
			"txid_snapshot_xmax",
			"txid_snapshot_xmin",
			"txid_status",
			"txid_visible_in_snapshot",
			"unnest",
			"upper",
			"upper_inc",
			"upper_inf",
			"variance",
			"var_pop",
			"var_samp",
			"websearch_to_tsquery",
			"width",
			"width_bucket",
			"xmlagg",
			"xmlattributes",
			"xmlcomment",
			"xmlconcat",
			"xmlelement",
			"xmlexists",
			"xmlforest",
			"xmlnamespaces",
			"xmlpi",
			"xmlroot",
			"xmltable",
			"xml_is_well_formed",
			"xml_is_well_formed_content",
			"xml_is_well_formed_document",
			"xpath",
			"xpath_exists"
		);

		addKeywords(HighlightTokenType.keyword1,
			"abort",
			"access",
			"add",
			"admin",
			"after",
			"aggregate",
			"all",
			"also",
			"alter",
			"always",
			"analyse",
			"analyze",
			"and",
			"any",
			"array",
			"as",
			"asc",
			"assertion",
			"asymmetric",
			"attribute",
			"authorization",
			"before",
			"begin",
			"between",
			"both",
			"buffers",
			"by",
			"call",
			"called",
			"cascade",
			"case",
			"cast",
			"characteristics",
			"check",
			"checkpoint",
			"class",
			"close",
			"cluster",
			"collate",
			"collation",
			"column",
			"columns",
			"comment",
			"commit",
			"committed",
			"concurrently",
			"configuration",
			"conflict",
			"connect",
			"connection",
			"constraint",
			"continue",
			"conversion",
			"copy",
			"cost",
			"costs",
			"create",
			"cross",
			"cube",
			"current",
			"cursor",
			"cycle",
			"database",
			"deallocate",
			"declare",
			"default",
			"deferrable",
			"deferred",
			"definer",
			"delete",
			"delimiter",
			"depends",
			"desc",
			"dictionary",
			"disable",
			"disable_page_skipping",
			"discard",
			"distinct",
			"do",
			"domain",
			"drop",
			"each",
			"else",
			"enable",
			"encoding",
			"encrypted",
			"end",
			"escape",
			"except",
			"exclude",
			"exclusive",
			"execute",
			"exists",
			"explain",
			"extension",
			"external",
			"false",
			"family",
			"fetch",
			"filter",
			"following",
			"for",
			"force_not_null",
			"force_null",
			"force_quote",
			"foreign",
			"format",
			"freeze",
			"from",
			"full",
			"function",
			"functions",
			"generated",
			"global",
			"grant",
			"group",
			"groups",
			"handler",
			"having",
			"header",
			"identity",
			"if",
			"ilike",
			"immediate",
			"immutable",
			"import",
			"in",
			"include",
			"index",
			"infinity",
			"inherit",
			"inherits",
			"initially",
			"inline",
			"inner",
			"inout",
			"input",
			"insert",
			"instead",
			"intersect",
			"into",
			"invoker",
			"is",
			"isnull",
			"isolation",
			"join",
			"language",
			"large",
			"lateral",
			"leading",
			"leakproof",
			"left",
			"level",
			"like",
			"limit",
			"listen",
			"load",
			"local",
			"location",
			"lock",
			"logged",
			"mapping",
			"materialized",
			"method",
			"move",
			"nan",
			"natural",
			"no",
			"none",
			"not",
			"nothing",
			"notify",
			"notnull",
			"nowait",
			"null",
			"object",
			"of",
			"off",
			"offset",
			"oids",
			"on",
			"only",
			"operator",
			"option",
			"options",
			"or",
			"order",
			"out",
			"outer",
			"over",
			"overlaps",
			"overriding",
			"owned",
			"owner",
			"parser",
			"partition",
			"passing",
			"password",
			"path",
			"placing",
			"policy",
			"preceding",
			"prepare",
			"prepared",
			"primary",
			"privileges",
			"procedural",
			"procedure",
			"procedures",
			"publication",
			"quote",
			"range",
			"range",
			"read",
			"reassign",
			"recursive",
			"ref",
			"references",
			"refresh",
			"reindex",
			"release",
			"rename",
			"repeatable",
			"replica",
			"reset",
			"restart",
			"restrict",
			"returning",
			"returns",
			"revoke",
			"right",
			"role",
			"rollback",
			"rollup",
			"routine",
			"routines",
			"row",
			"rows",
			"rule",
			"savepoint",
			"schema",
			"schemas",
			"search",
			"security",
			"select",
			"sequence",
			"sequences",
			"serializable",
			"server",
			"session",
			"set",
			"setof",
			"share",
			"show",
			"similar",
			"snapshot",
			"some",
			"sql",
			"stable",
			"start",
			"statement",
			"statistics",
			"storage",
			"strict",
			"subscription",
			"summary",
			"symmetric",
			"sysid",
			"system",
			"table",
			"tables",
			"tablesample",
			"tablespace",
			"temp",
			"template",
			"temporary",
			"then",
			"timing",
			"to",
			"trailing",
			"transaction",
			"transform",
			"trigger",
			"true",
			"truncate",
			"trusted",
			"type",
			"types",
			"unbounded",
			"uncommitted",
			"unencrypted",
			"union",
			"unique",
			"unlisten",
			"unlogged",
			"until",
			"update",
			"usage",
			"user",
			"using",
			"vacuum",
			"valid",
			"validate",
			"validator",
			"value",
			"values",
			"variadic",
			"verbose",
			"version",
			"view",
			"volatile",
			"when",
			"where",
			"window",
			"with",
			"within",
			"without",
			"work",
			"wrapper",
			"write"
		);

	}

	@Override
	protected void tokenFound(HighlightTokenType type, String text, int characterIndex) {
		m_renderer.renderToken(type, text, characterIndex);
	}

	@NonNull
	@Override
	public LineContext highlightLine(IHighlightRenderer renderer, @Nullable LineContext previous, @NonNull String line) {
		m_renderer = renderer;
		return start(line, previous);
	}

	static private String SSS = ""
		;

	@Override
	protected boolean isComment() {
		if(is("--")) {
			//-- Just copy everything
			lineComment();
			return true;
		}
		return super.isComment();
	}

	static public final void main(String[] args) {
		List<String> words = new ArrayList<>();
		for(String line : new LineIterator(SSS)) {
			line = line.trim();
			if(! line.startsWith("//")) {
				line = line.replace("+", "").replace("'", "");

				for(String s : line.split("\\s+")) {
					s = s.trim();
					if(!s.isEmpty()) {
						int pos = s.indexOf('|');
						if(pos == -1)
							words.add(s);
						else
							words.add(s.substring(0, pos).trim());
					}
				}
			}
		}
		Collections.sort(words);
		for(String word : words) {
			System.out.println("\t\t\"" + word.toLowerCase() + "\",");
		}

	}


}
